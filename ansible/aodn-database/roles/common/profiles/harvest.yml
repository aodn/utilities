#
# custom IMOS functions
#

- name: manage custom IMOS functions
  postgresql_exec:
    src: roles/common/files/imos--1.0.sql
    remote_src: yes
    database: "{{ database.name }}"
    host: "{{ database_endpoint }}"
    user: "{{ database_connection.login_user }}"
    password: "{{ database_connection.login_password }}"

- name: manage custom IMOS functions owner
  postgresql_exec:
    database: "{{ database.name }}"
    host: "{{ database_endpoint }}"
    user: "{{ database_connection.login_user }}"
    password: "{{ database_connection.login_password }}"
    content: |
      DO
      $BODY$
      DECLARE
          _sql   text;

      BEGIN

        SELECT INTO _sql
          string_agg('ALTER FUNCTION '
            || n.nspname || '.'
            || p.proname || '('
            || pg_get_function_identity_arguments(p.oid)
            || ') OWNER TO {{ database_connection.login_user }};', E'\n'
          )
        FROM pg_catalog.pg_proc p
        JOIN pg_catalog.pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = 'public';

        EXECUTE _sql;

      END
      $BODY$;
  when: rds_mode

#
# harvest_read_group / harvest_write_group roles
#

- name: manage harvest_read_group/harvest_write_group roles
  postgresql_user:
    name: "{{ roleitem }}"
    db: "{{ database.name }}"
    state: "{{ roleitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items:
    - harvest_read_group
    - harvest_write_group
  loop_control:
    loop_var: roleitem

# harvest_read_group privileges

- name: manage schema permissions for harvest_read_group
  postgresql_privs:
    db: "{{ database.name }}"
    privs: USAGE
    type: schema
    objs: "{{ schemaitem.schema }}"
    role: harvest_read_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage permissions for harvest_read_group tables
  postgresql_privs:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: ALL_IN_SCHEMA
    type: table
    privs: SELECT
    role: harvest_read_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage permissions for harvest_read_group sequences
  postgresql_privs:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: ALL_IN_SCHEMA
    type: sequence
    privs: SELECT
    role: harvest_read_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage permissions for harvest_read_group functions
  postgresql_privs2:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: ALL_IN_SCHEMA
    type: function
    privs: EXECUTE
    role: harvest_read_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage default permissions for harvest_read_group tables and sequences
  postgresql_privs2:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: TABLES,SEQUENCES
    privs: SELECT
    role: harvest_read_group
    type: default_privs
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage default permissions for harvest_read_group functions
  postgresql_privs2:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: FUNCTIONS
    type: default_privs
    privs: EXECUTE
    role: harvest_read_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

# harvest_write_group privileges

- name: manage schema permissions for harvest_write_group
  postgresql_privs:
    db: "{{ database.name }}"
    objs: "{{ schemaitem.schema }}"
    privs: ALL
    type: schema
    role: harvest_write_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem

- name: manage default permissions for harvest_write_group sequences, tables and functions
  postgresql_privs2:
    db: "{{ database.name }}"
    schema: "{{ schemaitem.schema }}"
    objs: SEQUENCES,TABLES,FUNCTIONS
    privs: ALL
    type: default_privs
    role: harvest_write_group
    state: "{{ schemaitem.state | default('present') }}"
    login_host: "{{ database_endpoint }}"
    login_password: "{{ database_connection.login_password }}"
    login_user: "{{ database_connection.login_user }}"
    port: "{{ database_connection.port | default(omit) }}"
  with_items: "{{ postgresql_schemas }}"
  loop_control:
    loop_var: schemaitem
