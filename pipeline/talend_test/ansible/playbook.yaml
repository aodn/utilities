

- name: test talend
  hosts: "{{hosts}}"
  gather_facts: no

  roles:
    - talend_test

  vars_files:
    - ../global_vars.yaml

  tasks:

    - name: create directories
      become: yes
      become_user: root
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      with_items: "{{ dirs }}"
      when: dirs is defined


    - name: drop objects in schema
      become: yes
      become_user: postgres
      command: psql -d harvest -c "select drop_objects_in_schema('"{{ item.name }}"');"
      register: truncate_schema
      with_items: "{{ database_schemas }}"
      when: create_schema == true


    - name: run talend liqui
      become: yes
      become_user: talend
      shell: |
        talend_regex="___"{{ item }}"___";
        /usr/local/talend/bin/talend-trigger -c /usr/local/talend/etc/trigger.conf --delete -f $talend_regex,$talend_regex
      with_items: "{{ talend_jobs }}"
      when: create_schema == true

    - include: process_action.yaml
      loop: "{{ actions }}"
      loop_control:
        loop_var: action_item


#### Query database and download result

    - set_fact:
       pgsql_output_dir: "/tmp/{{ ansible_ssh_host }}/{{ name }}"


    - name: remove pgsql_output_dir output dir
      become: yes
      become_user: root
      file: path={{ pgsql_output_dir }} state=absent


    - name: create dirs for pgsql output
      file: path={{ pgsql_output_dir }}/{{ item.name }} state=directory mode="a+w"
      with_items: "{{ database_schemas }}"


    - name: remove pgsql shell script file
      become: yes
      become_user: root
      file: path={{ pgsql_queries_shell_script }} state=absent


    - name: sql select queries
      pgsql_statement_gen:
        schema_obj: "{{ item }}"
        pgsql_output_dir: "{{ pgsql_output_dir }}"
        pgsql_queries_shell_script: "{{ pgsql_queries_shell_script }}"
      with_items: "{{ database_schemas }}"


    - name: run queries
      become: yes
      become_user: postgres
      command: "psql -d harvest -f {{ pgsql_queries_shell_script }}"


    - name: compress query result directory
      become: yes
      become_user: root
      archive:
        path: "/tmp/{{ ansible_ssh_host }}"
        dest: /tmp/query_results.tgz


    - set_fact:
       local_tmp_path: "/tmp/{{ ansible_ssh_host }}/query_results.tgz"


    - name: fetch query results to local
      fetch:
        src: /tmp/query_results.tgz
        dest: "{{ local_tmp_path }}"
        flat: true
        mode: 0774


    - name: unzip query results on localhost
      unarchive:
        src: "{{ local_tmp_path }}"
        dest: ../query_results
      delegate_to: localhost
