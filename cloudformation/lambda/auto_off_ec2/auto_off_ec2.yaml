AWSTemplateFormatVersion: "2010-09-09"
Description: 'CloudFormation template - Shuts down all non-prod EC2 instances or with tag "AutoOff=true"'
Mappings:
  EnvironmentMap:
    production:
      AccountId: 104044260116
Conditions:
  IsNonProdAccount: !Not [!Equals [!Ref 'AWS::AccountId', !FindInMap [EnvironmentMap, production, AccountId]]]
Resources:
  AutoOffEC2:
      Condition: IsNonProdAccount
      Type: 'AWS::Lambda::Function'
      Properties:
          Handler: 'index.handler'
          Description: 'Shuts down all non-prod EC2 instances or with tag "AutoOff=true"'
          Role: !GetAtt LambdaExecutionRole.Arn
          Runtime: python2.7
          Code: .

  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Condition: IsNonProdAccount
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Principal: {Service: [lambda.amazonaws.com]}
                Action: ['sts:AssumeRole']
          Path: /
          ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          Policies:
              - PolicyName: PublishAndExecute
                PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                  - Effect: Allow
                    Action: ['ec2:DescribeInstances', 'ec2:StopInstances', 'lambda:PublishVersion']
                    Resource: '*'
  CloudWatchEvent:
    Type: "AWS::Events::Rule"
    Condition: IsNonProdAccount
    Properties:
      Description: Triggers application cron
      ScheduleExpression: "cron(0 7 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutoOffEC2.Arn
          Id: "AutoOffEC2"
  PermissionForCloudWatchScheduleRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutoOffEC2
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEvent.Arn
